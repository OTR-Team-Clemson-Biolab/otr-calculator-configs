function ModifiedData = AMBRCHO_PostScript(Data)
% This PostScript adds atmospheric pressure to the gauge pressure contained
% in the Data table. This is due to the fact that the AMBR machine does not
% record absolute pressure. This is for current datasets where pressure is
% given in the form of the log file from the Pressure Logger application.
%
% This script has a user interface that opens and closes automatically
% during processing.
%
% The following Data columns are expected as input:
% - "temp_DateTime" - this is a vector of datetime objects
%
% The following columns are modified/created/deleted:
% "temp_DateTime" is deleted
% "Pressure" is modified to be absolute rather than gauge pressure

    global p_state;

    % Load figure
    fig = uifigure('WindowStyle', 'normal');

    fig.Name = 'Upload Pressure Data';
    fig.Position = [300, 500, 400, 150];

    gl = uigridlayout(fig, [2, 1]);

    wrapString = textwrap("Upload the pressure log file for the experiment. The file is a .csv file and is generated by the Pressure Logger application.", 60);

    textLabel = uilabel(gl, "Text", wrapString, "WordWrap", 'on');
    textLabel.Layout.Row = 1;

    uploadWeatherButton = uibutton(gl, "Text", 'Upload Pressure Log');
    uploadWeatherButton.Layout.Row = 2;

    uploadWeatherButton.ButtonPushedFcn = {@uploadWeatherHandler};

    % get start and end date and remove temp_DateTime
    start_date = Data.temp_DateTime(1);
    end_date = Data.temp_DateTime(end);
    Data.temp_DateTime = [];

    % wait for pressure data to be uploaded
    while ~isfield(p_state, 'pressure_data')
        pause(0.1);
    end

    % get time as a duration object
    Time = seconds(Data.Time);

    pressure_data = table();
    pressure_data.DATE = p_state.pressure_data{:, 1};
    pressure_data.PRESSURE = p_state.pressure_data{:, 2};
    
    date_format_string = 'MM/dd/yyyy HH:mm:ss:SSS';
    pressure_data.DATE = datetime(pressure_data.DATE, 'InputFormat', date_format_string);
    w = timetable(pressure_data.DATE);
    
    % synchronize tables
    empty_timetable = timetable(Time);
    pressure_data.Time = pressure_data.Time - start_date;
    atmospheric_pressure = synchronize(empty_timetable, pressure_data, Time, 'nearest');

    Data.Pressure = Data.Pressure + atmospheric_pressure.PRESSURE;
end

function uploadWeatherHandler(src, ~)
    global p_state;
    
    [filename, filepath] = uigetfile("*.csv"); % open file selector
    if filepath == 0
        return;
    end
    infile = [filepath, filename]; % get full file path
    p_state.pressure_data = readcell(infile, 'Delimiter', ','); % read weather .csv file

    pressure_data = table();
    pressure_data.DATE = p_state.pressure_data(:, 1);
    pressure_data.DATE = string(pressure_data.DATE);
    pressure_data.PRESSURE = p_state.pressure_data(:, 2);
    pressure_data.PRESSURE = cell2mat(pressure_data.PRESSURE);

    src.Enable = 'off';
    src.Icon = 'success';
end

